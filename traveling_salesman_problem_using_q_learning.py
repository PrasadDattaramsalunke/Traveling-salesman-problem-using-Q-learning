# -*- coding: utf-8 -*-
"""Traveling salesman problem using Q-Learning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N2C2hdgyhXmkhmdCCnDhmYbyWRmuRAcn
"""

import numpy as np
import random

#Distance matrix using manhattan method
Distance_matrix=np.array([
    [0,30,15,20,25],
    [30,0,24,36,21],
    [15,24,0,41,27],
    [20,36,41,0,32],
    [25,21,27,32,0]
])

#parameter for Q-learning
num_episod=100
max_step=len(Distance_matrix)

#algorithm parameter
learning_rate=0.8
discount_rate=0.9
exploration_prob=0.1

#initilize the Q-table
num_cities=len(Distance_matrix)
q_table=np.zeros((num_cities,num_cities))

def choose_action(state):
  if random.uniform(0,1)<exploration_prob:
    return random.choice(np.where(Distance_matrix[state]>0)[0])
  else:
    return np.argmax(q_table[state])

#update q_table
def update_q_table(state,next_state,action,reward):
  max_q_next=np.max(q_table[next_state])
  q_table[state,action]=q_table[state,action]+learning_rate*(reward+discount_rate*max_q_next)

#Q-learning algorithm

def q_learning():
  for episode in range(num_episod):
    state=random.randint(0,num_cities-1)
    total_reward=0

    for step in range(max_step):
      action =choose_action(state)
      next_state=action
      reward=Distance_matrix[state,action]

      total_reward+=reward
      update_q_table(state,next_state,action,reward)

      state=next_state

  print(f"episod{episode+1}/{num_episod},total_reward:{total_reward}")
  print('Q-table')
  print(q_table)

#call the Q-learning function
q_learning()

#exract best route
def extract_best_route(q_table,start_city):
  num_cities=len(q_table)
  best_route=[]
  current_city=start_city
  visited=[False]*num_cities
  visited[current_city]=True
  best_route.append(current_city)

  while not all(visited):
    next_city=None
    max_q_value=float('-inf')

    for city in range(num_cities):
      if not visited[city] and q_table[current_city,city] >max_q_value:
        max_q_value=q_table[current_city,city]
        next_city=city

    best_route.append(next_city)
    current_city=next_city
    visited[current_city]=True
  best_route.append(start_city)
  return best_route
start_city=0
best_route=extract_best_route(q_table,start_city)
print('best route:',best_route)

